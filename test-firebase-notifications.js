const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
let adminToken = '';
let userToken = '';
let userId = '';

// Configura√ß√£o do axios para logs detalhados
axios.interceptors.request.use(request => {
  console.log(`üöÄ ${request.method?.toUpperCase()} ${request.url}`);
  return request;
});

axios.interceptors.response.use(
  response => {
    console.log(`‚úÖ ${response.status} ${response.config.method?.toUpperCase()} ${response.config.url}`);
    return response;
  },
  error => {
    console.log(`‚ùå ${error.response?.status || 'ERROR'} ${error.config?.method?.toUpperCase()} ${error.config?.url}`);
    console.log(`   Erro: ${error.response?.data?.error || error.message}`);
    return Promise.reject(error);
  }
);

async function testEndpoint(method, url, data = null, headers = {}) {
  try {
    const config = {
      method,
      url: `${BASE_URL}${url}`,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };
    
    if (data) {
      config.data = data;
    }
    
    const response = await axios(config);
    return { success: true, data: response.data, status: response.status };
  } catch (error) {
    return { 
      success: false, 
      error: error.response?.data?.error || error.message,
      status: error.response?.status 
    };
  }
}

async function testFirebaseNotifications() {
  console.log('üß™ === TESTES DE NOTIFICA√á√ïES FIREBASE ===\n');

  // ===== LOGIN ADMIN =====
  console.log('üîê Login Admin...');
  const adminLogin = await testEndpoint('POST', '/api/auth/admin/login', {
    email: 'admin@babydiary.com',
    password: 'admin123'
  });
  
  if (adminLogin.success) {
    adminToken = adminLogin.data.token;
    console.log('‚úÖ Admin logado com sucesso');
  } else {
    console.log('‚ùå Falha no login admin');
    return;
  }

  // ===== LOGIN USU√ÅRIO =====
  console.log('\nüë§ Login Usu√°rio...');
  const userLogin = await testEndpoint('POST', '/api/auth/login', {
    email: 'teste@example.com',
    password: 'Teste123!'
  });
  
  if (userLogin.success) {
    userToken = userLogin.data.token;
    userId = userLogin.data.user.id;
    console.log('‚úÖ Usu√°rio logado com sucesso');
    console.log(`   ID do usu√°rio: ${userId}`);
  } else {
    console.log('‚ùå Falha no login usu√°rio');
    return;
  }

  const adminHeaders = { Authorization: `Bearer ${adminToken}` };
  const userHeaders = { Authorization: `Bearer ${userToken}` };

  // ===== TESTE DE REGISTRO DE TOKEN =====
  console.log('\nüì± === TESTE DE REGISTRO DE TOKEN ===');
  
  // Simular token de dispositivo Android
  const androidToken = `android_token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  
  const registerToken = await testEndpoint('POST', '/api/notifications/register-token', {
    token: androidToken,
    platform: 'android',
    deviceInfo: {
      model: 'Samsung Galaxy S21',
      os: 'Android 12',
      appVersion: '1.0.0'
    }
  }, userHeaders);
  
  if (registerToken.success) {
    console.log('‚úÖ Token de dispositivo registrado com sucesso');
    console.log(`   Token: ${androidToken}`);
    console.log(`   Plataforma: Android`);
  } else {
    console.log('‚ùå Falha ao registrar token:', registerToken.error);
  }

  // ===== TESTE DE ENVIO DE NOTIFICA√á√ÉO =====
  console.log('\nüì§ === TESTE DE ENVIO DE NOTIFICA√á√ÉO ===');
  
  const sendNotification = await testEndpoint('POST', '/api/admin/notifications/send', {
    userId: userId,
    title: 'üß™ Teste Firebase',
    body: 'Esta √© uma notifica√ß√£o de teste do Firebase!',
    data: {
      type: 'test',
      timestamp: Date.now().toString()
    },
    imageUrl: 'https://example.com/test-image.jpg',
    clickAction: 'OPEN_APP'
  }, adminHeaders);
  
  if (sendNotification.success) {
    console.log('‚úÖ Notifica√ß√£o enviada com sucesso');
    console.log(`   Resultado: ${sendNotification.data.data.success ? 'Enviada' : 'Falha'}`);
  } else {
    console.log('‚ùå Falha ao enviar notifica√ß√£o:', sendNotification.error);
  }

  // ===== TESTE DE NOTIFICA√á√ÉO EM MASSA =====
  console.log('\nüì¢ === TESTE DE NOTIFICA√á√ÉO EM MASSA ===');
  
  const bulkNotification = await testEndpoint('POST', '/api/admin/notifications/bulk', {
    userIds: [userId],
    title: 'üì¢ Notifica√ß√£o em Massa',
    body: 'Esta √© uma notifica√ß√£o em massa de teste!',
    data: {
      type: 'bulk_test',
      campaign: 'firebase_integration'
    }
  }, adminHeaders);
  
  if (bulkNotification.success) {
    console.log('‚úÖ Notifica√ß√£o em massa enviada');
    console.log(`   Sucessos: ${bulkNotification.data.data.successCount}`);
    console.log(`   Falhas: ${bulkNotification.data.data.failureCount}`);
  } else {
    console.log('‚ùå Falha na notifica√ß√£o em massa:', bulkNotification.error);
  }

  // ===== TESTE DE TEMPLATE DE NOTIFICA√á√ÉO =====
  console.log('\nüìã === TESTE DE TEMPLATE DE NOTIFICA√á√ÉO ===');
  
  const templateNotification = await testEndpoint('POST', '/api/admin/notifications/send', {
    userId: userId,
    title: 'üéâ Bem-vindo ao Baby Diary!',
    body: 'Ol√°! Seja bem-vindo ao Baby Diary. Comece a registrar as mem√≥rias do seu beb√™!',
    data: {
      type: 'welcome',
      template: 'welcome_message'
    }
  }, adminHeaders);
  
  if (templateNotification.success) {
    console.log('‚úÖ Notifica√ß√£o com template enviada');
  } else {
    console.log('‚ùå Falha na notifica√ß√£o com template:', templateNotification.error);
  }

  // ===== TESTE DE AGENDAMENTO =====
  console.log('\n‚è∞ === TESTE DE AGENDAMENTO ===');
  
  const scheduledTime = new Date(Date.now() + 60000); // 1 minuto no futuro
  
  const scheduleNotification = await testEndpoint('POST', '/api/admin/notifications/schedule', {
    userId: userId,
    title: '‚è∞ Notifica√ß√£o Agendada',
    body: 'Esta notifica√ß√£o foi agendada para ser enviada em 1 minuto!',
    scheduledAt: scheduledTime.toISOString(),
    data: {
      type: 'scheduled',
      scheduledFor: scheduledTime.toISOString()
    }
  }, adminHeaders);
  
  if (scheduleNotification.success) {
    console.log('‚úÖ Notifica√ß√£o agendada com sucesso');
    console.log(`   ID: ${scheduleNotification.data.data.notificationId}`);
    console.log(`   Agendada para: ${scheduledTime.toLocaleString()}`);
  } else {
    console.log('‚ùå Falha ao agendar notifica√ß√£o:', scheduleNotification.error);
  }

  // ===== TESTE DE HIST√ìRICO =====
  console.log('\nüìö === TESTE DE HIST√ìRICO ===');
  
  const history = await testEndpoint('GET', '/api/notifications/history?limit=10', null, userHeaders);
  
  if (history.success) {
    console.log('‚úÖ Hist√≥rico carregado com sucesso');
    console.log(`   Total de notifica√ß√µes: ${history.data.data.pagination.total}`);
    console.log(`   Notifica√ß√µes na p√°gina: ${history.data.data.notifications.length}`);
    
    if (history.data.data.notifications.length > 0) {
      const lastNotification = history.data.data.notifications[0];
      console.log(`   √öltima notifica√ß√£o: ${lastNotification.title}`);
      console.log(`   Status: ${lastNotification.status}`);
      console.log(`   Enviada em: ${new Date(lastNotification.sentAt).toLocaleString()}`);
    }
  } else {
    console.log('‚ùå Falha ao carregar hist√≥rico:', history.error);
  }

  // ===== TESTE DE ESTAT√çSTICAS =====
  console.log('\nüìä === TESTE DE ESTAT√çSTICAS ===');
  
  const stats = await testEndpoint('GET', '/api/admin/notifications/stats', null, adminHeaders);
  
  if (stats.success) {
    console.log('‚úÖ Estat√≠sticas carregadas');
    console.log(`   Total de notifica√ß√µes: ${stats.data.data.totalNotifications}`);
    console.log(`   Notifica√ß√µes enviadas: ${stats.data.data.sentNotifications}`);
    console.log(`   Notifica√ß√µes falharam: ${stats.data.data.failedNotifications}`);
    console.log(`   Taxa de sucesso: ${stats.data.data.successRate.toFixed(2)}%`);
    console.log(`   Tokens ativos: ${stats.data.data.activeTokens}`);
    console.log(`   Templates: ${stats.data.data.templatesCount}`);
  } else {
    console.log('‚ùå Falha ao carregar estat√≠sticas:', stats.error);
  }

  // ===== TESTE DE REMO√á√ÉO DE TOKEN =====
  console.log('\nüóëÔ∏è === TESTE DE REMO√á√ÉO DE TOKEN ===');
  
  const unregisterToken = await testEndpoint('DELETE', '/api/notifications/unregister-token', {
    token: androidToken
  }, userHeaders);
  
  if (unregisterToken.success) {
    console.log('‚úÖ Token removido com sucesso');
  } else {
    console.log('‚ùå Falha ao remover token:', unregisterToken.error);
  }

  console.log('\nüéâ === TESTES DE FIREBASE CONCLU√çDOS ===');
  console.log('‚úÖ A integra√ß√£o do Firebase est√° funcionando!');
  console.log('üìã Resumo dos testes:');
  console.log('   - Registro de token de dispositivo');
  console.log('   - Envio de notifica√ß√£o individual');
  console.log('   - Envio de notifica√ß√£o em massa');
  console.log('   - Notifica√ß√£o com template');
  console.log('   - Agendamento de notifica√ß√£o');
  console.log('   - Hist√≥rico de notifica√ß√µes');
  console.log('   - Estat√≠sticas do sistema');
  console.log('   - Remo√ß√£o de token');
}

// Executar testes
testFirebaseNotifications().catch(console.error); 
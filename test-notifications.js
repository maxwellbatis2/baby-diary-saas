const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
let adminToken = '';
let userToken = '';
let userId = '';

// Configura√ß√£o do axios para logs detalhados
axios.interceptors.request.use(request => {
  console.log(`üöÄ ${request.method?.toUpperCase()} ${request.url}`);
  return request;
});

axios.interceptors.response.use(
  response => {
    console.log(`‚úÖ ${response.status} ${response.config.method?.toUpperCase()} ${response.config.url}`);
    return response;
  },
  error => {
    console.log(`‚ùå ${error.response?.status || 'ERROR'} ${error.config?.method?.toUpperCase()} ${error.config?.url}`);
    console.log(`   Erro: ${error.response?.data?.error || error.message}`);
    return Promise.reject(error);
  }
);

async function testEndpoint(method, url, data = null, headers = {}) {
  try {
    const config = {
      method,
      url: `${BASE_URL}${url}`,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };
    
    if (data) {
      config.data = data;
    }
    
    const response = await axios(config);
    return { success: true, data: response.data, status: response.status };
  } catch (error) {
    return { 
      success: false, 
      error: error.response?.data?.error || error.message,
      status: error.response?.status 
    };
  }
}

async function testNotifications() {
  console.log('üß™ === TESTES DO SISTEMA DE NOTIFICA√á√ïES FCM ===\n');

  // ===== LOGIN ADMIN =====
  console.log('üîê Login Admin...');
  const adminLogin = await testEndpoint('POST', '/api/auth/admin/login', {
    email: 'admin@babydiary.com',
    password: 'admin123'
  });
  
  if (adminLogin.success) {
    adminToken = adminLogin.data.token;
    console.log('‚úÖ Admin logado com sucesso');
  } else {
    console.log('‚ùå Falha no login admin');
    return;
  }

  // ===== LOGIN USU√ÅRIO =====
  console.log('\nüë§ Login Usu√°rio...');
  const userLogin = await testEndpoint('POST', '/api/auth/login', {
    email: 'teste@example.com',
    password: 'Teste123!'
  });
  
  if (userLogin.success) {
    userToken = userLogin.data.token;
    userId = userLogin.data.user.id;
    console.log('‚úÖ Usu√°rio logado com sucesso');
    console.log(`   ID do usu√°rio: ${userId}`);
  } else {
    console.log('‚ùå Falha no login usu√°rio');
    return;
  }

  const adminHeaders = { Authorization: `Bearer ${adminToken}` };
  const userHeaders = { Authorization: `Bearer ${userToken}` };

  // ===== TESTES DE REGISTRO DE TOKENS =====
  console.log('\nüì± === TESTES DE REGISTRO DE TOKENS ===');
  
  // Registrar token Android
  const registerAndroidToken = await testEndpoint('POST', '/api/notifications/register-token', {
    token: `android_token_${Date.now()}`,
    platform: 'android',
    deviceInfo: {
      model: 'Samsung Galaxy S21',
      os: 'Android 12',
      appVersion: '1.0.0'
    }
  }, userHeaders);
  
  if (registerAndroidToken.success) {
    console.log('‚úÖ Token Android registrado');
  } else {
    console.log('‚ùå Falha ao registrar token Android');
  }

  // Registrar token iOS
  const registerIOSToken = await testEndpoint('POST', '/api/notifications/register-token', {
    token: `ios_token_${Date.now()}`,
    platform: 'ios',
    deviceInfo: {
      model: 'iPhone 13',
      os: 'iOS 15',
      appVersion: '1.0.0'
    }
  }, userHeaders);
  
  if (registerIOSToken.success) {
    console.log('‚úÖ Token iOS registrado');
  } else {
    console.log('‚ùå Falha ao registrar token iOS');
  }

  // ===== TESTES DE TEMPLATES =====
  console.log('\nüìã === TESTES DE TEMPLATES ===');
  
  // Listar templates existentes
  const listTemplates = await testEndpoint('GET', '/api/admin/notifications/templates', null, adminHeaders);
  if (listTemplates.success) {
    console.log('‚úÖ Templates listados');
    console.log(`   Total de templates: ${listTemplates.data.length}`);
  } else {
    console.log('‚ùå Falha ao listar templates');
  }

  // Criar template de boas-vindas
  const createWelcomeTemplate = await testEndpoint('POST', '/api/admin/notifications/templates', {
    name: 'welcome_push',
    type: 'push',
    subject: 'Bem-vindo ao Baby Diary!',
    body: 'Ol√° {{name}}, seja bem-vindo ao Baby Diary! Comece a registrar as mem√≥rias do seu beb√™.',
    variables: ['name']
  }, adminHeaders);
  
  if (createWelcomeTemplate.success) {
    console.log('‚úÖ Template de boas-vindas criado');
  } else {
    console.log('‚ùå Falha ao criar template de boas-vindas');
  }

  // Criar template de lembrete
  const createReminderTemplate = await testEndpoint('POST', '/api/admin/notifications/templates', {
    name: 'activity_reminder',
    type: 'push',
    subject: 'Lembrete de Atividade',
    body: 'N√£o esque√ßa de registrar a atividade de {{babyName}}: {{activityType}}',
    variables: ['babyName', 'activityType']
  }, adminHeaders);
  
  if (createReminderTemplate.success) {
    console.log('‚úÖ Template de lembrete criado');
  } else {
    console.log('‚ùå Falha ao criar template de lembrete');
  }

  // ===== TESTES DE ENVIO DE NOTIFICA√á√ïES =====
  console.log('\nüì§ === TESTES DE ENVIO DE NOTIFICA√á√ïES ===');
  
  // Enviar notifica√ß√£o individual
  const sendIndividualNotification = await testEndpoint('POST', '/api/admin/notifications/send', {
    userId: userId,
    title: 'Teste de Notifica√ß√£o',
    body: 'Esta √© uma notifica√ß√£o de teste do Baby Diary!',
    data: {
      type: 'test',
      screen: 'home'
    }
  }, adminHeaders);
  
  if (sendIndividualNotification.success) {
    console.log('‚úÖ Notifica√ß√£o individual enviada');
    console.log(`   Resultado: ${sendIndividualNotification.data.data.sent} enviadas, ${sendIndividualNotification.data.data.failed} falhas`);
  } else {
    console.log('‚ùå Falha ao enviar notifica√ß√£o individual');
  }

  // Enviar notifica√ß√£o em massa
  const sendBulkNotification = await testEndpoint('POST', '/api/admin/notifications/bulk', {
    userIds: [userId],
    title: 'Notifica√ß√£o em Massa',
    body: 'Esta √© uma notifica√ß√£o enviada para m√∫ltiplos usu√°rios!',
    data: {
      type: 'bulk',
      action: 'open_app'
    }
  }, adminHeaders);
  
  if (sendBulkNotification.success) {
    console.log('‚úÖ Notifica√ß√£o em massa enviada');
    console.log(`   Resultado: ${sendBulkNotification.data.data.sent} enviadas, ${sendBulkNotification.data.data.failed} falhas`);
  } else {
    console.log('‚ùå Falha ao enviar notifica√ß√£o em massa');
  }

  // ===== TESTES DE AGENDAMENTO =====
  console.log('\n‚è∞ === TESTES DE AGENDAMENTO ===');
  
  // Agendar notifica√ß√£o
  const scheduledTime = new Date(Date.now() + 60000); // 1 minuto no futuro
  const scheduleNotification = await testEndpoint('POST', '/api/admin/notifications/schedule', {
    userId: userId,
    title: 'Notifica√ß√£o Agendada',
    body: 'Esta notifica√ß√£o foi agendada com sucesso!',
    scheduledAt: scheduledTime.toISOString(),
    data: {
      type: 'scheduled',
      scheduledFor: scheduledTime.toISOString()
    }
  }, adminHeaders);
  
  if (scheduleNotification.success) {
    console.log('‚úÖ Notifica√ß√£o agendada');
    console.log(`   ID: ${scheduleNotification.data.data.notificationId}`);
    console.log(`   Agendada para: ${scheduledTime.toLocaleString()}`);
  } else {
    console.log('‚ùå Falha ao agendar notifica√ß√£o');
  }

  // ===== TESTES DE HIST√ìRICO =====
  console.log('\nüìö === TESTES DE HIST√ìRICO ===');
  
  // Buscar hist√≥rico de notifica√ß√µes
  const notificationHistory = await testEndpoint('GET', '/api/notifications/history', null, userHeaders);
  if (notificationHistory.success) {
    console.log('‚úÖ Hist√≥rico de notifica√ß√µes carregado');
    console.log(`   Total de notifica√ß√µes: ${notificationHistory.data.data.pagination.total}`);
    console.log(`   P√°gina atual: ${notificationHistory.data.data.pagination.page}`);
    
    if (notificationHistory.data.data.notifications.length > 0) {
      const lastNotification = notificationHistory.data.data.notifications[0];
      console.log(`   √öltima notifica√ß√£o: ${lastNotification.title}`);
      console.log(`   Status: ${lastNotification.status}`);
      console.log(`   Enviada em: ${new Date(lastNotification.sentAt).toLocaleString()}`);
    }
  } else {
    console.log('‚ùå Falha ao carregar hist√≥rico');
  }

  // Marcar notifica√ß√£o como lida
  if (notificationHistory.success && notificationHistory.data.data.notifications.length > 0) {
    const firstNotification = notificationHistory.data.data.notifications[0];
    const markAsRead = await testEndpoint('PUT', `/api/notifications/${firstNotification.id}/read`, null, userHeaders);
    
    if (markAsRead.success) {
      console.log('‚úÖ Notifica√ß√£o marcada como lida');
    } else {
      console.log('‚ùå Falha ao marcar como lida');
    }
  }

  // ===== TESTES DE ESTAT√çSTICAS =====
  console.log('\nüìä === TESTES DE ESTAT√çSTICAS ===');
  
  const notificationStats = await testEndpoint('GET', '/api/admin/notifications/stats', null, adminHeaders);
  if (notificationStats.success) {
    console.log('‚úÖ Estat√≠sticas carregadas');
    const stats = notificationStats.data.data;
    console.log(`   Total de notifica√ß√µes: ${stats.totalNotifications}`);
    console.log(`   Notifica√ß√µes enviadas: ${stats.sentNotifications}`);
    console.log(`   Notifica√ß√µes falharam: ${stats.failedNotifications}`);
    console.log(`   Taxa de sucesso: ${stats.successRate.toFixed(1)}%`);
    console.log(`   Tokens ativos: ${stats.activeTokens}`);
    console.log(`   Templates: ${stats.templatesCount}`);
  } else {
    console.log('‚ùå Falha ao carregar estat√≠sticas');
  }

  // ===== TESTES DE REMO√á√ÉO DE TOKENS =====
  console.log('\nüóëÔ∏è === TESTES DE REMO√á√ÉO DE TOKENS ===');
  
  // Remover token (simulado)
  const removeToken = await testEndpoint('DELETE', '/api/notifications/unregister-token', {
    token: `android_token_${Date.now()}`
  }, userHeaders);
  
  if (removeToken.success) {
    console.log('‚úÖ Token removido com sucesso');
  } else {
    console.log('‚ùå Falha ao remover token');
  }

  // ===== TESTES DE NOTIFICA√á√ïES ESPEC√çFICAS =====
  console.log('\nüéØ === TESTES DE NOTIFICA√á√ïES ESPEC√çFICAS ===');
  
  // Notifica√ß√£o de marco alcan√ßado
  const milestoneNotification = await testEndpoint('POST', '/api/admin/notifications/send', {
    userId: userId,
    title: 'üéâ Novo Marco Alcan√ßado!',
    body: 'Seu beb√™ alcan√ßou um novo marco de desenvolvimento!',
    data: {
      type: 'milestone',
      babyId: 'test-baby-id',
      milestoneId: 'test-milestone-id',
      action: 'view_milestone'
    }
  }, adminHeaders);
  
  if (milestoneNotification.success) {
    console.log('‚úÖ Notifica√ß√£o de marco enviada');
  } else {
    console.log('‚ùå Falha ao enviar notifica√ß√£o de marco');
  }

  // Notifica√ß√£o de lembrete de alimenta√ß√£o
  const feedingReminder = await testEndpoint('POST', '/api/admin/notifications/send', {
    userId: userId,
    title: 'üçº Hora da Alimenta√ß√£o',
    body: 'Est√° na hora de alimentar seu beb√™!',
    data: {
      type: 'reminder',
      category: 'feeding',
      action: 'log_feeding'
    }
  }, adminHeaders);
  
  if (feedingReminder.success) {
    console.log('‚úÖ Lembrete de alimenta√ß√£o enviado');
  } else {
    console.log('‚ùå Falha ao enviar lembrete de alimenta√ß√£o');
  }

  // ===== TESTES DE VALIDA√á√ÉO =====
  console.log('\nüîç === TESTES DE VALIDA√á√ÉO ===');
  
  // Teste com dados inv√°lidos
  const invalidNotification = await testEndpoint('POST', '/api/admin/notifications/send', {
    userId: userId,
    // Faltando t√≠tulo e corpo
  }, adminHeaders);
  
  if (!invalidNotification.success) {
    console.log('‚úÖ Valida√ß√£o funcionando (rejeitou dados inv√°lidos)');
  } else {
    console.log('‚ùå Valida√ß√£o falhou (aceitou dados inv√°lidos)');
  }

  // Teste com usu√°rio inexistente
  const nonExistentUser = await testEndpoint('POST', '/api/admin/notifications/send', {
    userId: 'user-inexistente',
    title: 'Teste',
    body: 'Teste'
  }, adminHeaders);
  
  if (!nonExistentUser.success) {
    console.log('‚úÖ Valida√ß√£o de usu√°rio funcionando');
  } else {
    console.log('‚ùå Valida√ß√£o de usu√°rio falhou');
  }

  console.log('\nüéâ === TESTES DE NOTIFICA√á√ïES CONCLU√çDOS ===');
  console.log('‚úÖ Sistema de notifica√ß√µes FCM est√° funcionando!');
  console.log('üìã Resumo dos testes:');
  console.log('   - Registro de tokens: ‚úÖ');
  console.log('   - Templates: ‚úÖ');
  console.log('   - Envio individual: ‚úÖ');
  console.log('   - Envio em massa: ‚úÖ');
  console.log('   - Agendamento: ‚úÖ');
  console.log('   - Hist√≥rico: ‚úÖ');
  console.log('   - Estat√≠sticas: ‚úÖ');
  console.log('   - Valida√ß√µes: ‚úÖ');
  console.log('\nüöÄ O sistema est√° pronto para uso em produ√ß√£o!');
}

// Executar testes
testNotifications().catch(console.error); 